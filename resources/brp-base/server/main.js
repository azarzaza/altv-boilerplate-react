import"reflect-metadata";import e from"path";import o from"fs";import{getResourcePath as t,log as n,on as a}from"alt-server";import s from"chalk";import r from"typeorm";import i from"pg";const c={dbHost:"localhost",dbName:"postgres",dbUsername:"postgres",dbPassword:"postgres",dbPort:5432};new i.Pool({}).on("error",e=>{console.log("Connection Refused Error"),console.log(e),process.exit(1)});class d{}d.isConnectionReady=!1,d.initConnection=()=>{const e={type:"postgres",host:c.dbHost,port:c.dbPort,database:c.dbName,username:c.dbUsername,password:c.dbPassword};(async()=>{console.time(s.greenBright("########## Database connection time!"));try{await r.createConnection(e),console.timeEnd(s.greenBright("########## Database connection time!")),n("Database connected"),d.isConnectionReady=!0}catch(e){n("Database not connected"),n(e),process.exit(1)}})()};a("ConnectionComplete",()=>{d.isConnectionReady||(d.isConnectionReady=!0)});const m=setInterval(()=>{n("Checking if the database connection is ready ..."),d.isConnectionReady&&(clearInterval(m),n("[32m Database Connection get read"))},2e3);(()=>{let n;try{let a=o.readFileSync(e.join(t("brp-base"),"/config.json")).toString();n=JSON.parse(a)}catch(e){console.log(s.redBright("Failed to load the configuration!"))}c.dbHost=n.db_host,c.dbName=n.db_name,c.dbUsername=n.db_username,c.dbPassword=n.db_password,c.dbPort=n.db_port})(),d.initConnection();
